/**
 * Description: Function for handling changes in a table
 */

import type { History } from 'umi';
import { stringify } from 'qs';
import type { TablePaginationConfig } from 'antd/lib/table';
import type { Key, SorterResult } from 'antd/lib/table/interface';

import { DefaultPaginationValues } from '@/enums/DefaultTableQueryParams';
import { arraySum } from '@/utils/helpers';

import type { ITableParams } from '../interfaces';

/**
 * @param {object} paginationParams - object with pagination parameters (generated by the table)
 * @param {object} filters - object with filter parameters (generated by the table)
 * @param {object} sorter - object with sorter parameters (generated by the table)
 * @param {History} history
 * @returns {Array<object>} newColumns - array of objects with updated sortOrder field parameters
 */
export const onTableChange = <RecordType>(
    paginationParams: TablePaginationConfig,
    filters: Record<string, (Key | boolean)[] | null>,
    sorter: SorterResult<RecordType> | SorterResult<RecordType>[],
    history: History,
) => {
    console.log('Various parameters', paginationParams, filters, sorter);
    const { location } = history;

    const params: ITableParams = {};

    // sort
    let sorterResult;
    if (Array.isArray(sorter)) {
    // eslint-disable-next-line prefer-destructuring
      sorterResult = sorter[0];
    } else {
      sorterResult = sorter;
    }
    const { field, order } = sorterResult;
    const resultOrder = order === 'ascend';
    if (!order) {
      // FIXME:
      // delete params.Order;
      // delete params.Asc;
    } else {
      // FIXME:
      // params.Order = field;
      // params.Asc = resultOrder;
    }

    // pagination
    const { current, pageSize } = paginationParams;
    if (current === DefaultPaginationValues.Page) {
      delete params.page;
      delete params.pageSize;
    } else {
      params.page = current;
      params.pageSize = pageSize;
    }

    // filters
    Object.keys(filters).forEach((key) => {
      if (Array.isArray(filters[key])) {
        if (filters[key].length) {
            params[key] = arraySum(filters[key]);
        } else {
            delete params[key];
        }
      }
      if (typeof filters[key] === 'string') {
        // TODO: возможная реализация
      }
    });

    const queriesString = stringify(params, { addQueryPrefix: true });
    history.push(`${location.pathname}${queriesString}`);
    window.scrollTo(0, 0);
};

export default onTableChange;
